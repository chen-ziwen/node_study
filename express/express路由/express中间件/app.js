const express = require('express');
const router = require('./router');

const app = express();


// 中间件就是可以处理处理请求过程中的一些方法
// 客户端向服务器请求数据时，中间件会将服务器返回的数据进行加工处理，最后再响应给客户端。类似于vue的路由守卫和js的proxy代理，拦截信息处理信息。

// 中间件其实就是一个函数，跟路由中的回调函数很类似，就是参数会比路由回调多一个next函数，用来控制路由是否继续执行。
// next 函数是实现多个中间件连续调用的关键，它表示把流转关系转交给下一个中间件或者路由。

// 中间件有全局中间件和局部中间件，我觉得很多代码的设计模式都很像，例如这个中间件和Vue的路由守卫是一个思路的东西。
// 多个中间件之间，共享同一份req和res，基于这样的性质，我们可以在上游的中间中，统一为req或res对象添加自定义方法或属性，供下游的中间件或路由进行使用。
// app.use(中间件) // 这样就可以生成一个全局调用的中间件
// 中间件一定要在路由注册之前去注册，因为服务器文件都是从上到下去执行的。

// 中间件大致分为五类：
// 错误级别中间件接受四个参数，第一个为err，其他与路由一致，且它必须写在路由的后面，在路由抛出错误后，错误中间件再去运行接收处理 错误信息
// 注意！！！ 错误中间件必须放在所有路由的后面
const stop = (req, res, next) => {
    console.log('我停止路由的执行');
    next() // 不调用next函数的话，路由请求会被暂停
}

app.use(stop); // 不使用use注册的中间件都属于局部生效的中间件
app.use('/message', router);
app.listen(80, () => {
    console.log('web sevre running at http://127.0.0.1')
})